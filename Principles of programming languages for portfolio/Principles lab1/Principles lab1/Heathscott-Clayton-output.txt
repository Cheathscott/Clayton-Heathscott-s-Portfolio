<Tokens>
<Keyword> class </Keyword>
<identifier> SquareGame </identifier>
<Symbol> { </Symbol>
<identifier> field </identifier>
<identifier> Square </identifier>
<identifier> square </identifier>
<Symbol> ; </Symbol>
<identifier> field </identifier>
<Keyword> int </Keyword>
<identifier> direction </identifier>
<Symbol> ; </Symbol>
<identifier> constructor </identifier>
<identifier> SquareGame </identifier>
<identifier> new </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> square </identifier>
<identifier> square </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Keyword> let </Keyword>
<identifier> direction </identifier>
<identifier> direction </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Keyword> return </Keyword>
<identifier> square </identifier>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> method </identifier>
<Keyword> void </Keyword>
<identifier> dispose </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> dispose </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Keyword> do </Keyword>
<identifier> Memory </identifier>
<identifier> deAlloc </identifier>
<identifier> square </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Keyword> return </Keyword>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> method </identifier>
<Keyword> void </Keyword>
<identifier> run </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> var </Keyword>
<identifier> char </identifier>
<identifier> key </identifier>
<Symbol> ; </Symbol>
<Keyword> var </Keyword>
<identifier> boolean </identifier>
<identifier> exit </identifier>
<Symbol> ; </Symbol>
<Keyword> let </Keyword>
<identifier> exit </identifier>
<identifier> key </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Keyword> while </Keyword>
<identifier> exit </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> while </Keyword>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> key </identifier>
<identifier> key </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Keyword> do </Keyword>
<identifier> moveSquare </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> exit </identifier>
<identifier> exit </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> decSize </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> incSize </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> direction </identifier>
<identifier> exit </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> direction </identifier>
<identifier> key </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> direction </identifier>
<identifier> square </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> direction </identifier>
<identifier> direction </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<Keyword> while </Keyword>
<identifier> key </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> let </Keyword>
<identifier> key </identifier>
<identifier> key </identifier>
<Symbol> = </Symbol>
<Symbol> ; </Symbol>
<Keyword> do </Keyword>
<identifier> moveSquare </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<Symbol> } </Symbol>
<Keyword> return </Keyword>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> method </identifier>
<Keyword> void </Keyword>
<identifier> moveSquare </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<identifier> if </identifier>
<identifier> direction </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> moveUp </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> direction </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> moveDown </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> direction </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> moveLeft </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<identifier> if </identifier>
<identifier> direction </identifier>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> { </Symbol>
<Keyword> do </Keyword>
<identifier> square </identifier>
<identifier> moveRight </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<Keyword> do </Keyword>
<identifier> Sys </identifier>
<identifier> wait </identifier>
<identifier> direction </identifier>
<Symbol> . </Symbol>
<Symbol> ( </Symbol>
<Symbol> ) </Symbol>
<Symbol> ; </Symbol>
<Keyword> return </Keyword>
<Symbol> ; </Symbol>
<Symbol> } </Symbol>
<Symbol> } </Symbol>
